{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport { get, uniq, compact } from \"lodash\";\nimport { applyFilters, applyFilter, filtersFromUserOptions } from \"../utilities/filter\"; // TODO: Use these in the `mapStateToProps` functions accross application\n// rather than accessing state directly?\n\nconst allCocktailsSelector = state => state.db.cocktails;\n\nexport const allGlassesSelector = state => state.db.glasses;\n\nconst barSelector = state => state.bar;\n\nconst favouritesSelector = state => state.favourites;\n\nconst currentSlugFromUrlSelector = (_, props) => get(props, \"match.params.slug\");\n\nconst currentSlugFromCocktailPropSelector = (_, props) => get(props, \"cocktail.slug\"); // figures out the cocktail in question from either the page URL\n// or, if that doesn't exist, it looks for a \"cocktail\" prop and\n// gets the slug from that.\n\n\nconst currentSlugSelector = createSelector(currentSlugFromUrlSelector, currentSlugFromCocktailPropSelector, (urlSlug, cocktailPropSlug) => urlSlug || cocktailPropSlug); // isFavouriteSelector\n// Derives whether the current cocktail is a favourite\n\nexport const isFavouriteSelector = createSelector(favouritesSelector, currentSlugSelector, (favourites, cocktailSlug) => favourites.includes(cocktailSlug)); // filtersSelector\n// Derives the currently applied filters\n\nconst filtersSelector = state => filtersFromUserOptions(state);\n\nexport const currentCocktailSelector = createSelector(allCocktailsSelector, currentSlugSelector, (cocktails, slug) => cocktails.find(c => c.slug === slug)); // filteredCocktailsSelector\n// Derives the currently filtered cocktails\n\nexport const filteredCocktailsSelector = createSelector(allCocktailsSelector, filtersSelector, (cocktails, filter) => applyFilters(cocktails, filter).sort((a, b) => a.name > b.name ? 1 : -1)); // makeableCocktailsSelector\n// Derives the currently makeable cocktails based on bar contents\n\nexport const makeableCocktailsSelector = createSelector(allCocktailsSelector, barSelector, (cocktails, bar) => applyFilter(cocktails, {\n  rule: \"makeableFrom\",\n  ingredients: bar\n})); // allCategoriesSelector\n// Derives an array of all the categories\n\nexport const allCategoriesSelector = createSelector(allCocktailsSelector, cocktails => compact(uniq(cocktails.map(c => c.category))));","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/selectors/index.js"],"names":["createSelector","get","uniq","compact","applyFilters","applyFilter","filtersFromUserOptions","allCocktailsSelector","state","db","cocktails","allGlassesSelector","glasses","barSelector","bar","favouritesSelector","favourites","currentSlugFromUrlSelector","_","props","currentSlugFromCocktailPropSelector","currentSlugSelector","urlSlug","cocktailPropSlug","isFavouriteSelector","cocktailSlug","includes","filtersSelector","currentCocktailSelector","slug","find","c","filteredCocktailsSelector","filter","sort","a","b","name","makeableCocktailsSelector","rule","ingredients","allCategoriesSelector","map","category"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,QAAmC,QAAnC;AAEA,SACEC,YADF,EAEEC,WAFF,EAGEC,sBAHF,QAIO,qBAJP,C,CAMA;AACA;;AACA,MAAMC,oBAAoB,GAAGC,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASC,SAA/C;;AACA,OAAO,MAAMC,kBAAkB,GAAGH,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASG,OAA7C;;AACP,MAAMC,WAAW,GAAGL,KAAK,IAAIA,KAAK,CAACM,GAAnC;;AACA,MAAMC,kBAAkB,GAAGP,KAAK,IAAIA,KAAK,CAACQ,UAA1C;;AAEA,MAAMC,0BAA0B,GAAG,CAACC,CAAD,EAAIC,KAAJ,KACjClB,GAAG,CAACkB,KAAD,EAAQ,mBAAR,CADL;;AAGA,MAAMC,mCAAmC,GAAG,CAACF,CAAD,EAAIC,KAAJ,KAC1ClB,GAAG,CAACkB,KAAD,EAAQ,eAAR,CADL,C,CAGA;AACA;AACA;;;AACA,MAAME,mBAAmB,GAAGrB,cAAc,CACxCiB,0BADwC,EAExCG,mCAFwC,EAGxC,CAACE,OAAD,EAAUC,gBAAV,KAA+BD,OAAO,IAAIC,gBAHF,CAA1C,C,CAMA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAGxB,cAAc,CAC/Ce,kBAD+C,EAE/CM,mBAF+C,EAG/C,CAACL,UAAD,EAAaS,YAAb,KAA8BT,UAAU,CAACU,QAAX,CAAoBD,YAApB,CAHiB,CAA1C,C,CAMP;AACA;;AACA,MAAME,eAAe,GAAGnB,KAAK,IAAIF,sBAAsB,CAACE,KAAD,CAAvD;;AAEA,OAAO,MAAMoB,uBAAuB,GAAG5B,cAAc,CACnDO,oBADmD,EAEnDc,mBAFmD,EAGnD,CAACX,SAAD,EAAYmB,IAAZ,KAAqBnB,SAAS,CAACoB,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACF,IAAF,KAAWA,IAA/B,CAH8B,CAA9C,C,CAMP;AACA;;AACA,OAAO,MAAMG,yBAAyB,GAAGhC,cAAc,CACrDO,oBADqD,EAErDoB,eAFqD,EAGrD,CAACjB,SAAD,EAAYuB,MAAZ,KACE7B,YAAY,CAACM,SAAD,EAAYuB,MAAZ,CAAZ,CAAgCC,IAAhC,CAAqC,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAAvE,CAJmD,CAAhD,C,CAOP;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAGtC,cAAc,CACrDO,oBADqD,EAErDM,WAFqD,EAGrD,CAACH,SAAD,EAAYI,GAAZ,KACET,WAAW,CAACK,SAAD,EAAY;AACrB6B,EAAAA,IAAI,EAAE,cADe;AAErBC,EAAAA,WAAW,EAAE1B;AAFQ,CAAZ,CAJwC,CAAhD,C,CAUP;AACA;;AACA,OAAO,MAAM2B,qBAAqB,GAAGzC,cAAc,CACjDO,oBADiD,EAEjDG,SAAS,IAAIP,OAAO,CAACD,IAAI,CAACQ,SAAS,CAACgC,GAAV,CAAcX,CAAC,IAAIA,CAAC,CAACY,QAArB,CAAD,CAAL,CAF6B,CAA5C","sourcesContent":["import { createSelector } from \"reselect\";\nimport { get, uniq, compact } from \"lodash\";\n\nimport {\n  applyFilters,\n  applyFilter,\n  filtersFromUserOptions\n} from \"../utilities/filter\";\n\n// TODO: Use these in the `mapStateToProps` functions accross application\n// rather than accessing state directly?\nconst allCocktailsSelector = state => state.db.cocktails;\nexport const allGlassesSelector = state => state.db.glasses;\nconst barSelector = state => state.bar;\nconst favouritesSelector = state => state.favourites;\n\nconst currentSlugFromUrlSelector = (_, props) =>\n  get(props, \"match.params.slug\");\n\nconst currentSlugFromCocktailPropSelector = (_, props) =>\n  get(props, \"cocktail.slug\");\n\n// figures out the cocktail in question from either the page URL\n// or, if that doesn't exist, it looks for a \"cocktail\" prop and\n// gets the slug from that.\nconst currentSlugSelector = createSelector(\n  currentSlugFromUrlSelector,\n  currentSlugFromCocktailPropSelector,\n  (urlSlug, cocktailPropSlug) => urlSlug || cocktailPropSlug\n);\n\n// isFavouriteSelector\n// Derives whether the current cocktail is a favourite\nexport const isFavouriteSelector = createSelector(\n  favouritesSelector,\n  currentSlugSelector,\n  (favourites, cocktailSlug) => favourites.includes(cocktailSlug)\n);\n\n// filtersSelector\n// Derives the currently applied filters\nconst filtersSelector = state => filtersFromUserOptions(state);\n\nexport const currentCocktailSelector = createSelector(\n  allCocktailsSelector,\n  currentSlugSelector,\n  (cocktails, slug) => cocktails.find(c => c.slug === slug)\n);\n\n// filteredCocktailsSelector\n// Derives the currently filtered cocktails\nexport const filteredCocktailsSelector = createSelector(\n  allCocktailsSelector,\n  filtersSelector,\n  (cocktails, filter) =>\n    applyFilters(cocktails, filter).sort((a, b) => (a.name > b.name ? 1 : -1))\n);\n\n// makeableCocktailsSelector\n// Derives the currently makeable cocktails based on bar contents\nexport const makeableCocktailsSelector = createSelector(\n  allCocktailsSelector,\n  barSelector,\n  (cocktails, bar) =>\n    applyFilter(cocktails, {\n      rule: \"makeableFrom\",\n      ingredients: bar\n    })\n);\n\n// allCategoriesSelector\n// Derives an array of all the categories\nexport const allCategoriesSelector = createSelector(\n  allCocktailsSelector,\n  cocktails => compact(uniq(cocktails.map(c => c.category)))\n);\n"]},"metadata":{},"sourceType":"module"}
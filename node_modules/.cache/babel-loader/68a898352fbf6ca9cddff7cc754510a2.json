{"ast":null,"code":"import { fetchCocktailEnrichment } from \"./services/cocktailDBAPI.service\";\nimport * as actionTypes from \"./actionTypes\";\nexport function loadCocktails(payload) {\n  return {\n    type: actionTypes.LOAD_COCKTAILS,\n    payload\n  };\n}\nexport function loadIngredients(payload) {\n  return {\n    type: actionTypes.LOAD_INGREDIENTS,\n    payload\n  };\n}\nexport function loadGlasses(payload) {\n  return {\n    type: actionTypes.LOAD_GLASSES,\n    payload\n  };\n}\nexport function updateFilter(payload) {\n  return {\n    type: actionTypes.UPDATE_FILTER,\n    payload\n  };\n}\nexport function setBar(payload) {\n  return {\n    type: actionTypes.SET_BAR,\n    payload\n  };\n}\nexport function activateFilterDialog(payload) {\n  return {\n    type: actionTypes.ACTIVATE_FILTER_DIALOG,\n    payload\n  };\n}\nexport function closeFilterDialog() {\n  return {\n    type: actionTypes.CLOSE_FILTER_DIALOG\n  };\n}\nexport function updateFavourites(payload) {\n  return {\n    type: actionTypes.UPDATE_FAVOURITES,\n    payload\n  };\n}\nexport function addToBar(payload) {\n  return {\n    type: actionTypes.ADD_TO_BAR,\n    payload\n  };\n}\nexport function updateSettings(payload) {\n  return {\n    type: actionTypes.UPDATE_SETTINGS,\n    payload\n  };\n}\nexport function togglePride() {\n  return {\n    type: actionTypes.TOGGLE_PRIDE\n  };\n}\nexport function toggleLingo() {\n  return {\n    type: actionTypes.TOGGLE_LINGO\n  };\n}\n\nfunction startEnrichCocktail(cocktailName) {\n  return {\n    type: actionTypes.START_ENRICH_COCKTAIL,\n    payload: cocktailName\n  };\n}\n\nfunction failEnrichCocktail(cocktailName, error) {\n  return {\n    type: actionTypes.FAIL_ENRICH_COCKTAIL,\n    payload: {\n      cocktailName,\n      error\n    }\n  };\n}\n\nfunction finishEnrichCocktail(cocktailName, enrichment) {\n  return {\n    type: actionTypes.FINISH_ENRICH_COCKTAIL,\n    payload: {\n      cocktailName,\n      enrichment\n    }\n  };\n}\n\nexport function enrichCocktail(cocktail) {\n  return async dispatch => {\n    // don't re-enrich: this action only does something if a\n    // cocktail has not already been enriched.\n    const {\n      enriched,\n      enriching,\n      enrichmentFailed\n    } = cocktail;\n    if (enriching || enriched || enrichmentFailed) return;\n    dispatch(startEnrichCocktail(cocktail.name));\n\n    try {\n      const enrichment = await fetchCocktailEnrichment(cocktail);\n      dispatch(finishEnrichCocktail(cocktail.name, enrichment));\n    } catch (err) {\n      dispatch(failEnrichCocktail(cocktail.name, err.message));\n    }\n  };\n}","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/actions.js"],"names":["fetchCocktailEnrichment","actionTypes","loadCocktails","payload","type","LOAD_COCKTAILS","loadIngredients","LOAD_INGREDIENTS","loadGlasses","LOAD_GLASSES","updateFilter","UPDATE_FILTER","setBar","SET_BAR","activateFilterDialog","ACTIVATE_FILTER_DIALOG","closeFilterDialog","CLOSE_FILTER_DIALOG","updateFavourites","UPDATE_FAVOURITES","addToBar","ADD_TO_BAR","updateSettings","UPDATE_SETTINGS","togglePride","TOGGLE_PRIDE","toggleLingo","TOGGLE_LINGO","startEnrichCocktail","cocktailName","START_ENRICH_COCKTAIL","failEnrichCocktail","error","FAIL_ENRICH_COCKTAIL","finishEnrichCocktail","enrichment","FINISH_ENRICH_COCKTAIL","enrichCocktail","cocktail","dispatch","enriched","enriching","enrichmentFailed","name","err","message"],"mappings":"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","sourcesContent":["import { fetchCocktailEnrichment } from \"./services/cocktailDBAPI.service\";\n\nimport * as actionTypes from \"./actionTypes\";\n\nexport function loadCocktails(payload) {\n  return { type: actionTypes.LOAD_COCKTAILS, payload };\n}\n\nexport function loadIngredients(payload) {\n  return { type: actionTypes.LOAD_INGREDIENTS, payload };\n}\n\nexport function loadGlasses(payload) {\n  return { type: actionTypes.LOAD_GLASSES, payload };\n}\n\nexport function updateFilter(payload) {\n  return { type: actionTypes.UPDATE_FILTER, payload };\n}\n\nexport function setBar(payload) {\n  return { type: actionTypes.SET_BAR, payload };\n}\n\nexport function activateFilterDialog(payload) {\n  return { type: actionTypes.ACTIVATE_FILTER_DIALOG, payload };\n}\n\nexport function closeFilterDialog() {\n  return { type: actionTypes.CLOSE_FILTER_DIALOG };\n}\n\nexport function updateFavourites(payload) {\n  return { type: actionTypes.UPDATE_FAVOURITES, payload };\n}\n\nexport function addToBar(payload) {\n  return { type: actionTypes.ADD_TO_BAR, payload };\n}\n\nexport function updateSettings(payload) {\n  return { type: actionTypes.UPDATE_SETTINGS, payload };\n}\n\nexport function togglePride() {\n  return { type: actionTypes.TOGGLE_PRIDE };\n}\n\nexport function toggleLingo() {\n  return { type: actionTypes.TOGGLE_LINGO };\n}\n\nfunction startEnrichCocktail(cocktailName) {\n  return { type: actionTypes.START_ENRICH_COCKTAIL, payload: cocktailName };\n}\n\nfunction failEnrichCocktail(cocktailName, error) {\n  return {\n    type: actionTypes.FAIL_ENRICH_COCKTAIL,\n    payload: { cocktailName, error }\n  };\n}\n\nfunction finishEnrichCocktail(cocktailName, enrichment) {\n  return {\n    type: actionTypes.FINISH_ENRICH_COCKTAIL,\n    payload: {\n      cocktailName,\n      enrichment\n    }\n  };\n}\n\nexport function enrichCocktail(cocktail) {\n  return async dispatch => {\n    // don't re-enrich: this action only does something if a\n    // cocktail has not already been enriched.\n    const { enriched, enriching, enrichmentFailed } = cocktail;\n    if (enriching || enriched || enrichmentFailed) return;\n\n    dispatch(startEnrichCocktail(cocktail.name));\n    try {\n      const enrichment = await fetchCocktailEnrichment(cocktail);\n      dispatch(finishEnrichCocktail(cocktail.name, enrichment));\n    } catch (err) {\n      dispatch(failEnrichCocktail(cocktail.name, err.message));\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
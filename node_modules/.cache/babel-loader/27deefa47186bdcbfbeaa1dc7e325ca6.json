{"ast":null,"code":"/**\n * Filter Config\n *\n * Stores the main filter config object and exports a bunch of\n * utility functions to help work with it. A 'filter' can exist in\n * two distinct forms;\n *\n * * An intention from the user (e.g. in their options)\n * * A filter that is ready to be applied\n *\n * In this config, the key is the \"rule\" and filters can have the\n * following properties;\n *\n * label: The human-readable label to display for this filter\n * dialogComponent: (optional) Dialog associated with filter\n * buildFilter: Function for constructing a filter from user options\n *\n * the `buildFilter` function of each filter config entry will be\n * passed two arguments;\n *\n * - the user filter options\n * - the rest of the state\n *\n * it should  return an object representing the filter rule to apply.\n * At the very least this needs to specify a \"rule\" property - this\n * will be used to determine which function to  call in `filterRules`\n * in order to actually apply the filter.\n *\n */import{keys,get}from\"lodash\";import{GlassFilterDialog,CategoryFilterDialog,IngredientFilterDialog}from\"./components/Filters\";/**\n * Main filter config object\n */var filterConfig={byIngredient:{dialogComponent:IngredientFilterDialog,label:\"By Ingredient...\",buildFilter:function buildFilter(_ref){var ingredientsRule=_ref.ingredientsRule,ingredients=_ref.ingredients;return{rule:ingredientsRule,ingredients:ingredients};}},byCategory:{dialogComponent:CategoryFilterDialog,label:\"By Category...\",buildFilter:function buildFilter(_ref2){var categories=_ref2.categories;return{rule:\"inCategory\",categories:categories};}},byGlass:{dialogComponent:GlassFilterDialog,label:\"By Glass...\",buildFilter:function buildFilter(_ref3){var glasses=_ref3.glasses;return{rule:\"inGlass\",glasses:glasses};}},barOnly:{label:\"Makeable from Bar\",buildFilter:function buildFilter(_,_ref4){var bar=_ref4.bar;return{rule:\"makeableFrom\",ingredients:bar};}},favouritesOnly:{label:\"Favourites only\",buildFilter:function buildFilter(_,_ref5){var favourites=_ref5.favourites;return{rule:\"isFavourite\",favourites:favourites};}},veganOnly:{label:\"Vegan only\",buildFilter:function buildFilter(){return{rule:\"mustHaveTruthyProperty\",property:\"vegan\"};}},ibaOnly:{label:\"IBA only\",buildFilter:function buildFilter(){return{rule:\"mustHaveTruthyProperty\",property:\"iba\"};}}};function getFilterConfig(filterRule){return filterConfig[filterRule&&filterRule.toString()];}// Fishes out the label for a filter rule (if there is one)\nexport function labelFor(filterRule){return get(getFilterConfig(filterRule),\"label\")||filterRule;}// Fishes out the custom dialog for a filter rule (if there is one)\nexport function dialogFor(filterRule){return get(getFilterConfig(filterRule),\"dialogComponent\");}// Returns true if this filter rule has a custom dialog\nexport function hasDialog(filterRule){return!!dialogFor(filterRule);}// HoF for building the actual filters that will be applied from\n// user options.\nexport function buildFilter(filterRule){return get(getFilterConfig(filterRule),\"buildFilter\");}// Returns a list of the rules\nexport function getRules(){return keys(filterConfig);}","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/filterConfig.js"],"names":["keys","get","GlassFilterDialog","CategoryFilterDialog","IngredientFilterDialog","filterConfig","byIngredient","dialogComponent","label","buildFilter","ingredientsRule","ingredients","rule","byCategory","categories","byGlass","glasses","barOnly","_","bar","favouritesOnly","favourites","veganOnly","property","ibaOnly","getFilterConfig","filterRule","toString","labelFor","dialogFor","hasDialog","getRules"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BA,OAASA,IAAT,CAAeC,GAAf,KAA0B,QAA1B,CAEA,OACEC,iBADF,CAEEC,oBAFF,CAGEC,sBAHF,KAIO,sBAJP,CAMA;;GAGA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,YAAY,CAAE,CACZC,eAAe,CAAEH,sBADL,CAEZI,KAAK,CAAE,kBAFK,CAGZC,WAAW,CAAE,8BAAGC,CAAAA,eAAH,MAAGA,eAAH,CAAoBC,WAApB,MAAoBA,WAApB,OAAuC,CAClDC,IAAI,CAAEF,eAD4C,CAElDC,WAAW,CAAXA,WAFkD,CAAvC,EAHD,CADK,CASnBE,UAAU,CAAE,CACVN,eAAe,CAAEJ,oBADP,CAEVK,KAAK,CAAE,gBAFG,CAGVC,WAAW,CAAE,+BAAGK,CAAAA,UAAH,OAAGA,UAAH,OAAqB,CAChCF,IAAI,CAAE,YAD0B,CAEhCE,UAAU,CAAVA,UAFgC,CAArB,EAHH,CATO,CAiBnBC,OAAO,CAAE,CACPR,eAAe,CAAEL,iBADV,CAEPM,KAAK,CAAE,aAFA,CAGPC,WAAW,CAAE,+BAAGO,CAAAA,OAAH,OAAGA,OAAH,OAAkB,CAC7BJ,IAAI,CAAE,SADuB,CAE7BI,OAAO,CAAPA,OAF6B,CAAlB,EAHN,CAjBU,CAyBnBC,OAAO,CAAE,CACPT,KAAK,CAAE,mBADA,CAEPC,WAAW,CAAE,qBAACS,CAAD,WAAMC,CAAAA,GAAN,OAAMA,GAAN,OAAiB,CAC5BP,IAAI,CAAE,cADsB,CAE5BD,WAAW,CAAEQ,GAFe,CAAjB,EAFN,CAzBU,CAgCnBC,cAAc,CAAE,CACdZ,KAAK,CAAE,iBADO,CAEdC,WAAW,CAAE,qBAACS,CAAD,WAAMG,CAAAA,UAAN,OAAMA,UAAN,OAAwB,CACnCT,IAAI,CAAE,aAD6B,CAEnCS,UAAU,CAAVA,UAFmC,CAAxB,EAFC,CAhCG,CAuCnBC,SAAS,CAAE,CACTd,KAAK,CAAE,YADE,CAETC,WAAW,CAAE,6BAAO,CAClBG,IAAI,CAAE,wBADY,CAElBW,QAAQ,CAAE,OAFQ,CAAP,EAFJ,CAvCQ,CA8CnBC,OAAO,CAAE,CACPhB,KAAK,CAAE,UADA,CAEPC,WAAW,CAAE,6BAAO,CAClBG,IAAI,CAAE,wBADY,CAElBW,QAAQ,CAAE,KAFQ,CAAP,EAFN,CA9CU,CAArB,CAuDA,QAASE,CAAAA,eAAT,CAAyBC,UAAzB,CAAqC,CACnC,MAAOrB,CAAAA,YAAY,CAACqB,UAAU,EAAIA,UAAU,CAACC,QAAX,EAAf,CAAnB,CACD,CAED;AACA,MAAO,SAASC,CAAAA,QAAT,CAAkBF,UAAlB,CAA8B,CACnC,MAAOzB,CAAAA,GAAG,CAACwB,eAAe,CAACC,UAAD,CAAhB,CAA8B,OAA9B,CAAH,EAA6CA,UAApD,CACD,CAED;AACA,MAAO,SAASG,CAAAA,SAAT,CAAmBH,UAAnB,CAA+B,CACpC,MAAOzB,CAAAA,GAAG,CAACwB,eAAe,CAACC,UAAD,CAAhB,CAA8B,iBAA9B,CAAV,CACD,CAED;AACA,MAAO,SAASI,CAAAA,SAAT,CAAmBJ,UAAnB,CAA+B,CACpC,MAAO,CAAC,CAACG,SAAS,CAACH,UAAD,CAAlB,CACD,CAED;AACA;AACA,MAAO,SAASjB,CAAAA,WAAT,CAAqBiB,UAArB,CAAiC,CACtC,MAAOzB,CAAAA,GAAG,CAACwB,eAAe,CAACC,UAAD,CAAhB,CAA8B,aAA9B,CAAV,CACD,CAED;AACA,MAAO,SAASK,CAAAA,QAAT,EAAoB,CACzB,MAAO/B,CAAAA,IAAI,CAACK,YAAD,CAAX,CACD","sourcesContent":["/**\n * Filter Config\n *\n * Stores the main filter config object and exports a bunch of\n * utility functions to help work with it. A 'filter' can exist in\n * two distinct forms;\n *\n * * An intention from the user (e.g. in their options)\n * * A filter that is ready to be applied\n *\n * In this config, the key is the \"rule\" and filters can have the\n * following properties;\n *\n * label: The human-readable label to display for this filter\n * dialogComponent: (optional) Dialog associated with filter\n * buildFilter: Function for constructing a filter from user options\n *\n * the `buildFilter` function of each filter config entry will be\n * passed two arguments;\n *\n * - the user filter options\n * - the rest of the state\n *\n * it should  return an object representing the filter rule to apply.\n * At the very least this needs to specify a \"rule\" property - this\n * will be used to determine which function to  call in `filterRules`\n * in order to actually apply the filter.\n *\n */\nimport { keys, get } from \"lodash\";\n\nimport {\n  GlassFilterDialog,\n  CategoryFilterDialog,\n  IngredientFilterDialog\n} from \"./components/Filters\";\n\n/**\n * Main filter config object\n */\nconst filterConfig = {\n  byIngredient: {\n    dialogComponent: IngredientFilterDialog,\n    label: \"By Ingredient...\",\n    buildFilter: ({ ingredientsRule, ingredients }) => ({\n      rule: ingredientsRule,\n      ingredients\n    })\n  },\n  byCategory: {\n    dialogComponent: CategoryFilterDialog,\n    label: \"By Category...\",\n    buildFilter: ({ categories }) => ({\n      rule: \"inCategory\",\n      categories\n    })\n  },\n  byGlass: {\n    dialogComponent: GlassFilterDialog,\n    label: \"By Glass...\",\n    buildFilter: ({ glasses }) => ({\n      rule: \"inGlass\",\n      glasses\n    })\n  },\n  barOnly: {\n    label: \"Makeable from Bar\",\n    buildFilter: (_, { bar }) => ({\n      rule: \"makeableFrom\",\n      ingredients: bar\n    })\n  },\n  favouritesOnly: {\n    label: \"Favourites only\",\n    buildFilter: (_, { favourites }) => ({\n      rule: \"isFavourite\",\n      favourites\n    })\n  },\n  veganOnly: {\n    label: \"Vegan only\",\n    buildFilter: () => ({\n      rule: \"mustHaveTruthyProperty\",\n      property: \"vegan\"\n    })\n  },\n  ibaOnly: {\n    label: \"IBA only\",\n    buildFilter: () => ({\n      rule: \"mustHaveTruthyProperty\",\n      property: \"iba\"\n    })\n  }\n};\n\nfunction getFilterConfig(filterRule) {\n  return filterConfig[filterRule && filterRule.toString()];\n}\n\n// Fishes out the label for a filter rule (if there is one)\nexport function labelFor(filterRule) {\n  return get(getFilterConfig(filterRule), \"label\") || filterRule;\n}\n\n// Fishes out the custom dialog for a filter rule (if there is one)\nexport function dialogFor(filterRule) {\n  return get(getFilterConfig(filterRule), \"dialogComponent\");\n}\n\n// Returns true if this filter rule has a custom dialog\nexport function hasDialog(filterRule) {\n  return !!dialogFor(filterRule);\n}\n\n// HoF for building the actual filters that will be applied from\n// user options.\nexport function buildFilter(filterRule) {\n  return get(getFilterConfig(filterRule), \"buildFilter\");\n}\n\n// Returns a list of the rules\nexport function getRules() {\n  return keys(filterConfig);\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import compact from \"lodash/compact\";\nimport isArray from \"lodash/isArray\";\nimport { buildFilter } from \"../filterConfig\";\nimport * as rules from \"./filterRules\";\n/**\n * Apply a single filter to a set of cocktails\n * @param {*} cocktails\n * @param {*} filter\n */\n\nexport function applyFilter(cocktails, filter) {\n  return cocktails.filter(cocktail => {\n    return rules[filter.rule.toString()](cocktail, filter);\n  });\n}\n/**\n * Apply multiple filters, one after the other\n * @param {*} cocktails\n * @param {*} filters\n */\n\nexport function applyFilters(cocktails, filters = []) {\n  if (!isArray(filters)) filters = [filters];\n  return compact(filters).reduce((acc, filter) => [...applyFilter(acc, filter)], [...cocktails]);\n} // builds an array of filters based on the users current filter options.\n\nexport function filtersFromUserOptions(state) {\n  const {\n    filterOptions,\n    ...otherState\n  } = state; // Build initial filters based on the current \"activeFilters\"\n\n  const filters = filterOptions.activeFilters.map(filterRule => {\n    return buildFilter(filterRule)(filterOptions, otherState);\n  }); // Add in the special \"Name filter\", which is a filter but not in the\n  // typical sense (so, it's not on the menu for example)\n\n  if (filterOptions.nameFilter) {\n    filters.push({\n      rule: \"nameIncludes\",\n      searchText: filterOptions.nameFilter\n    });\n  }\n\n  return filters;\n}","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/utilities/filter.js"],"names":["compact","isArray","buildFilter","rules","applyFilter","cocktails","filter","cocktail","rule","toString","applyFilters","filters","reduce","acc","filtersFromUserOptions","state","filterOptions","otherState","activeFilters","map","filterRule","nameFilter","push","searchText"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AAEA;;;;;;AAKA,OAAO,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,MAAhC,EAAwC;AAC7C,SAAOD,SAAS,CAACC,MAAV,CAAiBC,QAAQ,IAAI;AAClC,WAAOJ,KAAK,CAACG,MAAM,CAACE,IAAP,CAAYC,QAAZ,EAAD,CAAL,CAA8BF,QAA9B,EAAwCD,MAAxC,CAAP;AACD,GAFM,CAAP;AAGD;AAED;;;;;;AAKA,OAAO,SAASI,YAAT,CAAsBL,SAAtB,EAAiCM,OAAO,GAAG,EAA3C,EAA+C;AACpD,MAAI,CAACV,OAAO,CAACU,OAAD,CAAZ,EAAuBA,OAAO,GAAG,CAACA,OAAD,CAAV;AAEvB,SAAOX,OAAO,CAACW,OAAD,CAAP,CAAiBC,MAAjB,CACL,CAACC,GAAD,EAAMP,MAAN,KAAiB,CAAC,GAAGF,WAAW,CAACS,GAAD,EAAMP,MAAN,CAAf,CADZ,EAEL,CAAC,GAAGD,SAAJ,CAFK,CAAP;AAID,C,CAED;;AACA,OAAO,SAASS,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAM;AAAEC,IAAAA,aAAF;AAAiB,OAAGC;AAApB,MAAmCF,KAAzC,CAD4C,CAG5C;;AACA,QAAMJ,OAAO,GAAGK,aAAa,CAACE,aAAd,CAA4BC,GAA5B,CAAgCC,UAAU,IAAI;AAC5D,WAAOlB,WAAW,CAACkB,UAAD,CAAX,CAAwBJ,aAAxB,EAAuCC,UAAvC,CAAP;AACD,GAFe,CAAhB,CAJ4C,CAQ5C;AACA;;AACA,MAAID,aAAa,CAACK,UAAlB,EAA8B;AAC5BV,IAAAA,OAAO,CAACW,IAAR,CAAa;AACXd,MAAAA,IAAI,EAAE,cADK;AAEXe,MAAAA,UAAU,EAAEP,aAAa,CAACK;AAFf,KAAb;AAID;;AAED,SAAOV,OAAP;AACD","sourcesContent":["import compact from \"lodash/compact\";\nimport isArray from \"lodash/isArray\";\nimport { buildFilter } from \"../filterConfig\";\nimport * as rules from \"./filterRules\";\n\n/**\n * Apply a single filter to a set of cocktails\n * @param {*} cocktails\n * @param {*} filter\n */\nexport function applyFilter(cocktails, filter) {\n  return cocktails.filter(cocktail => {\n    return rules[filter.rule.toString()](cocktail, filter);\n  });\n}\n\n/**\n * Apply multiple filters, one after the other\n * @param {*} cocktails\n * @param {*} filters\n */\nexport function applyFilters(cocktails, filters = []) {\n  if (!isArray(filters)) filters = [filters];\n\n  return compact(filters).reduce(\n    (acc, filter) => [...applyFilter(acc, filter)],\n    [...cocktails]\n  );\n}\n\n// builds an array of filters based on the users current filter options.\nexport function filtersFromUserOptions(state) {\n  const { filterOptions, ...otherState } = state;\n\n  // Build initial filters based on the current \"activeFilters\"\n  const filters = filterOptions.activeFilters.map(filterRule => {\n    return buildFilter(filterRule)(filterOptions, otherState);\n  });\n\n  // Add in the special \"Name filter\", which is a filter but not in the\n  // typical sense (so, it's not on the menu for example)\n  if (filterOptions.nameFilter) {\n    filters.push({\n      rule: \"nameIncludes\",\n      searchText: filterOptions.nameFilter\n    });\n  }\n\n  return filters;\n}\n"]},"metadata":{},"sourceType":"module"}
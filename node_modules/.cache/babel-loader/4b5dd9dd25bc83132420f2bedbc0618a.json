{"ast":null,"code":"import produce from \"immer\";\nimport { loadPersistedState } from \"../utilities/persistence\";\nimport { hasDialog } from \"../filterConfig\";\nimport * as actionTypes from \"../actionTypes\";\nconst defaultState = {\n  db: {\n    cocktails: [],\n    ingredients: [],\n    glasses: []\n  },\n  filterOptions: {\n    activeFilters: [],\n    activeDialog: null,\n    ingredients: [],\n    ingredientsRule: \"mustInclude\",\n    barOnly: false,\n    categories: [],\n    glasses: []\n  },\n  bar: [],\n  favourites: [],\n  settings: {\n    theme: \"light\",\n    color: \"indigo\",\n    browserMode: \"card\",\n    units: \"cl\",\n    pride: false,\n    lingo: false\n  }\n}; // Parts of the initial state will be from our persistence layer.\n\nconst persistedState = loadPersistedState();\nconst initialState = produce({ ...defaultState,\n  ...persistedState\n}, draft => {\n  draft.settings = { ...defaultState.settings,\n    ...draft.settings,\n    ...(persistedState ? persistedState.settings : null)\n  };\n});\n/**\n * Main reducer\n */\n\nexport default ((state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case actionTypes.LOAD_COCKTAILS:\n      draft.db.cocktails = action.payload;\n      break;\n\n    case actionTypes.LOAD_INGREDIENTS:\n      draft.db.ingredients = action.payload;\n      break;\n\n    case actionTypes.LOAD_GLASSES:\n      draft.db.glasses = action.payload;\n      break;\n\n    case actionTypes.UPDATE_FAVOURITES:\n      draft.favourites = action.payload;\n      break;\n\n    case actionTypes.UPDATE_FILTER:\n      draft.filterOptions = { ...draft.filterOptions,\n        ...action.payload\n      };\n      break;\n\n    case actionTypes.ACTIVATE_FILTER_DIALOG:\n      draft.filterOptions.activeDialog = action.payload && hasDialog(action.payload) ? action.payload : null;\n      break;\n\n    case actionTypes.CLOSE_FILTER_DIALOG:\n      draft.filterOptions.activeDialog = null;\n      break;\n\n    case actionTypes.SET_BAR:\n      draft.bar = action.payload;\n      break;\n\n    case actionTypes.TOGGLE_PRIDE:\n      draft.settings.pride = !draft.settings.pride;\n      break;\n\n    case actionTypes.TOGGLE_LINGO:\n      draft.settings.lingo = !draft.settings.lingo;\n      break;\n\n    case actionTypes.UPDATE_SETTINGS:\n      draft.settings = { ...draft.settings,\n        ...action.payload\n      };\n      break;\n\n    case actionTypes.ADD_TO_BAR:\n      draft.bar = [...new Set([...draft.bar, action.payload])];\n      break;\n\n    case actionTypes.START_ENRICH_COCKTAIL:\n      draft.db.cocktails.find(c => c.name === action.payload).enriching = true;\n      break;\n\n    case actionTypes.FAIL_ENRICH_COCKTAIL:\n      Object.assign(draft.db.cocktails.find(c => c.name === action.payload.cocktailName), {\n        enriching: false,\n        enrichmentFailed: true,\n        enrichmentFailedError: action.payload.error.message\n      });\n      break;\n\n    case actionTypes.FINISH_ENRICH_COCKTAIL:\n      Object.assign(draft.db.cocktails.find(c => c.name === action.payload.cocktailName), {\n        enriching: false,\n        enriched: true,\n        enrichment: action.payload.enrichment\n      });\n      break;\n\n    default:\n  }\n}));","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/reducers/index.js"],"names":["produce","loadPersistedState","hasDialog","actionTypes","defaultState","db","cocktails","ingredients","glasses","filterOptions","activeFilters","activeDialog","ingredientsRule","barOnly","categories","bar","favourites","settings","theme","color","browserMode","units","pride","lingo","persistedState","initialState","draft","state","action","type","LOAD_COCKTAILS","payload","LOAD_INGREDIENTS","LOAD_GLASSES","UPDATE_FAVOURITES","UPDATE_FILTER","ACTIVATE_FILTER_DIALOG","CLOSE_FILTER_DIALOG","SET_BAR","TOGGLE_PRIDE","TOGGLE_LINGO","UPDATE_SETTINGS","ADD_TO_BAR","Set","START_ENRICH_COCKTAIL","find","c","name","enriching","FAIL_ENRICH_COCKTAIL","Object","assign","cocktailName","enrichmentFailed","enrichmentFailedError","error","message","FINISH_ENRICH_COCKTAIL","enriched","enrichment"],"mappings":"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","sourcesContent":["import produce from \"immer\";\nimport { loadPersistedState } from \"../utilities/persistence\";\nimport { hasDialog } from \"../filterConfig\";\n\nimport * as actionTypes from \"../actionTypes\";\n\nconst defaultState = {\n  db: {\n    cocktails: [],\n    ingredients: [],\n    glasses: []\n  },\n  filterOptions: {\n    activeFilters: [],\n    activeDialog: null,\n    ingredients: [],\n    ingredientsRule: \"mustInclude\",\n    barOnly: false,\n    categories: [],\n    glasses: []\n  },\n  bar: [],\n  favourites: [],\n  settings: {\n    theme: \"light\",\n    color: \"indigo\",\n    browserMode: \"card\",\n    units: \"cl\",\n    pride: false,\n    lingo: false\n  }\n};\n\n// Parts of the initial state will be from our persistence layer.\n\nconst persistedState = loadPersistedState();\n\nconst initialState = produce({ ...defaultState, ...persistedState }, draft => {\n  draft.settings = {\n    ...defaultState.settings,\n    ...draft.settings,\n    ...(persistedState ? persistedState.settings : null)\n  };\n});\n\n/**\n * Main reducer\n */\nexport default (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case actionTypes.LOAD_COCKTAILS:\n        draft.db.cocktails = action.payload;\n        break;\n      case actionTypes.LOAD_INGREDIENTS:\n        draft.db.ingredients = action.payload;\n        break;\n      case actionTypes.LOAD_GLASSES:\n        draft.db.glasses = action.payload;\n        break;\n      case actionTypes.UPDATE_FAVOURITES:\n        draft.favourites = action.payload;\n        break;\n      case actionTypes.UPDATE_FILTER:\n        draft.filterOptions = { ...draft.filterOptions, ...action.payload };\n        break;\n      case actionTypes.ACTIVATE_FILTER_DIALOG:\n        draft.filterOptions.activeDialog =\n          action.payload && hasDialog(action.payload) ? action.payload : null;\n        break;\n      case actionTypes.CLOSE_FILTER_DIALOG:\n        draft.filterOptions.activeDialog = null;\n        break;\n      case actionTypes.SET_BAR:\n        draft.bar = action.payload;\n        break;\n      case actionTypes.TOGGLE_PRIDE:\n        draft.settings.pride = !draft.settings.pride;\n        break;\n      case actionTypes.TOGGLE_LINGO:\n        draft.settings.lingo = !draft.settings.lingo;\n        break;\n      case actionTypes.UPDATE_SETTINGS:\n        draft.settings = { ...draft.settings, ...action.payload };\n        break;\n      case actionTypes.ADD_TO_BAR:\n        draft.bar = [...new Set([...draft.bar, action.payload])];\n        break;\n      case actionTypes.START_ENRICH_COCKTAIL:\n        draft.db.cocktails.find(\n          c => c.name === action.payload\n        ).enriching = true;\n        break;\n      case actionTypes.FAIL_ENRICH_COCKTAIL:\n        Object.assign(\n          draft.db.cocktails.find(c => c.name === action.payload.cocktailName),\n          {\n            enriching: false,\n            enrichmentFailed: true,\n            enrichmentFailedError: action.payload.error.message\n          }\n        );\n        break;\n      case actionTypes.FINISH_ENRICH_COCKTAIL:\n        Object.assign(\n          draft.db.cocktails.find(c => c.name === action.payload.cocktailName),\n          {\n            enriching: false,\n            enriched: true,\n            enrichment: action.payload.enrichment\n          }\n        );\n        break;\n      default:\n    }\n  });\n"]},"metadata":{},"sourceType":"module"}
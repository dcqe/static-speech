{"ast":null,"code":"import{createSelector}from\"reselect\";import{get,uniq,compact}from\"lodash\";import{applyFilters,applyFilter,filtersFromUserOptions}from\"../utilities/filter\";// TODO: Use these in the `mapStateToProps` functions accross application\n// rather than accessing state directly?\nvar allCocktailsSelector=function allCocktailsSelector(state){return state.db.cocktails;};export var allGlassesSelector=function allGlassesSelector(state){return state.db.glasses;};var barSelector=function barSelector(state){return state.bar;};var favouritesSelector=function favouritesSelector(state){return state.favourites;};var currentSlugFromUrlSelector=function currentSlugFromUrlSelector(_,props){return get(props,\"match.params.slug\");};var currentSlugFromCocktailPropSelector=function currentSlugFromCocktailPropSelector(_,props){return get(props,\"cocktail.slug\");};// figures out the cocktail in question from either the page URL\n// or, if that doesn't exist, it looks for a \"cocktail\" prop and\n// gets the slug from that.\nvar currentSlugSelector=createSelector(currentSlugFromUrlSelector,currentSlugFromCocktailPropSelector,function(urlSlug,cocktailPropSlug){return urlSlug||cocktailPropSlug;});// isFavouriteSelector\n// Derives whether the current cocktail is a favourite\nexport var isFavouriteSelector=createSelector(favouritesSelector,currentSlugSelector,function(favourites,cocktailSlug){return favourites.includes(cocktailSlug);});// filtersSelector\n// Derives the currently applied filters\nvar filtersSelector=function filtersSelector(state){return filtersFromUserOptions(state);};export var currentCocktailSelector=createSelector(allCocktailsSelector,currentSlugSelector,function(cocktails,slug){return cocktails.find(function(c){return c.slug===slug;});});// filteredCocktailsSelector\n// Derives the currently filtered cocktails\nexport var filteredCocktailsSelector=createSelector(allCocktailsSelector,filtersSelector,function(cocktails,filter){return applyFilters(cocktails,filter).sort(function(a,b){return a.name>b.name?1:-1;});});// makeableCocktailsSelector\n// Derives the currently makeable cocktails based on bar contents\nexport var makeableCocktailsSelector=createSelector(allCocktailsSelector,barSelector,function(cocktails,bar){return applyFilter(cocktails,{rule:\"makeableFrom\",ingredients:bar});});// allCategoriesSelector\n// Derives an array of all the categories\nexport var allCategoriesSelector=createSelector(allCocktailsSelector,function(cocktails){return compact(uniq(cocktails.map(function(c){return c.category;})));});","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/selectors/index.js"],"names":["createSelector","get","uniq","compact","applyFilters","applyFilter","filtersFromUserOptions","allCocktailsSelector","state","db","cocktails","allGlassesSelector","glasses","barSelector","bar","favouritesSelector","favourites","currentSlugFromUrlSelector","_","props","currentSlugFromCocktailPropSelector","currentSlugSelector","urlSlug","cocktailPropSlug","isFavouriteSelector","cocktailSlug","includes","filtersSelector","currentCocktailSelector","slug","find","c","filteredCocktailsSelector","filter","sort","a","b","name","makeableCocktailsSelector","rule","ingredients","allCategoriesSelector","map","category"],"mappings":"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","sourcesContent":["import { createSelector } from \"reselect\";\nimport { get, uniq, compact } from \"lodash\";\n\nimport {\n  applyFilters,\n  applyFilter,\n  filtersFromUserOptions\n} from \"../utilities/filter\";\n\n// TODO: Use these in the `mapStateToProps` functions accross application\n// rather than accessing state directly?\nconst allCocktailsSelector = state => state.db.cocktails;\nexport const allGlassesSelector = state => state.db.glasses;\nconst barSelector = state => state.bar;\nconst favouritesSelector = state => state.favourites;\n\nconst currentSlugFromUrlSelector = (_, props) =>\n  get(props, \"match.params.slug\");\n\nconst currentSlugFromCocktailPropSelector = (_, props) =>\n  get(props, \"cocktail.slug\");\n\n// figures out the cocktail in question from either the page URL\n// or, if that doesn't exist, it looks for a \"cocktail\" prop and\n// gets the slug from that.\nconst currentSlugSelector = createSelector(\n  currentSlugFromUrlSelector,\n  currentSlugFromCocktailPropSelector,\n  (urlSlug, cocktailPropSlug) => urlSlug || cocktailPropSlug\n);\n\n// isFavouriteSelector\n// Derives whether the current cocktail is a favourite\nexport const isFavouriteSelector = createSelector(\n  favouritesSelector,\n  currentSlugSelector,\n  (favourites, cocktailSlug) => favourites.includes(cocktailSlug)\n);\n\n// filtersSelector\n// Derives the currently applied filters\nconst filtersSelector = state => filtersFromUserOptions(state);\n\nexport const currentCocktailSelector = createSelector(\n  allCocktailsSelector,\n  currentSlugSelector,\n  (cocktails, slug) => cocktails.find(c => c.slug === slug)\n);\n\n// filteredCocktailsSelector\n// Derives the currently filtered cocktails\nexport const filteredCocktailsSelector = createSelector(\n  allCocktailsSelector,\n  filtersSelector,\n  (cocktails, filter) =>\n    applyFilters(cocktails, filter).sort((a, b) => (a.name > b.name ? 1 : -1))\n);\n\n// makeableCocktailsSelector\n// Derives the currently makeable cocktails based on bar contents\nexport const makeableCocktailsSelector = createSelector(\n  allCocktailsSelector,\n  barSelector,\n  (cocktails, bar) =>\n    applyFilter(cocktails, {\n      rule: \"makeableFrom\",\n      ingredients: bar\n    })\n);\n\n// allCategoriesSelector\n// Derives an array of all the categories\nexport const allCategoriesSelector = createSelector(\n  allCocktailsSelector,\n  cocktails => compact(uniq(cocktails.map(c => c.category)))\n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { map, compact } from \"lodash\"; // Given a list of cocktails, this returns the counts of the ingredients\n// \"appearances\" in the list (e.g. Gin: 4, Brandy: 2...)\n\nexport function countIngredients(cocktails = []) {\n  const counts = cocktails.reduce((acc, cocktail) => {\n    cocktail.ingredients.forEach(({\n      ingredient\n    }) => {\n      if (!ingredient) return;\n      acc[`${ingredient}`] ? acc[`${ingredient}`] = acc[`${ingredient}`] + 1 : acc[`${ingredient}`] = 1;\n    });\n    return acc;\n  }, {});\n  return map(counts, (count, name) => {\n    return {\n      count,\n      name\n    };\n  }).sort((a, b) => a.count < b.count ? 1 : -1);\n}\nexport function getIngredientKeys(cocktail) {\n  return compact(cocktail.ingredients.map(i => i.ingredient));\n} // We store all ingredient quantities in cl. This function converts\n// that to another format should the user want to.\n\nexport function convertMeasurementFromCl(amount, unit) {\n  switch (unit) {\n    case \"ml\":\n      return amount * 10;\n\n    case \"oz\":\n      return Math.round(amount * 0.351951 * 2) / 2;\n\n    default:\n      return amount;\n  }\n} // pass in amount in cl, returns any \"bar lingo\" covered by that amount.\n\nfunction lingoForClMeasure(amount) {\n  if (amount === 0.25) return \"A Dash of\";\n  if (amount === 0.5) return \"1 Bar Spoon\";\n  if (amount === 3) return \"1 Pony\";\n  if (amount === 4.5) return \"1 Jigger\";\n  if (amount === 6) return \"2 Ponies\";\n  if (amount === 9) return \"2 Jiggers\";\n} // returns a string representing amount/units, including lingo\n\n\nexport function createMeasurementString(amount, units, useLingo) {\n  return useLingo && lingoForClMeasure(amount) || `${convertMeasurementFromCl(amount, units)} ${units}`;\n}","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/utilities/cocktail.utils.js"],"names":["map","compact","countIngredients","cocktails","counts","reduce","acc","cocktail","ingredients","forEach","ingredient","count","name","sort","a","b","getIngredientKeys","i","convertMeasurementFromCl","amount","unit","Math","round","lingoForClMeasure","createMeasurementString","units","useLingo"],"mappings":"AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,QAA7B,C,CAEA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,SAAS,GAAG,EAAtC,EAA0C;AAC/C,QAAMC,MAAM,GAAGD,SAAS,CAACE,MAAV,CAAiB,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACjDA,IAAAA,QAAQ,CAACC,WAAT,CAAqBC,OAArB,CAA6B,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAoB;AAC/C,UAAI,CAACA,UAAL,EAAiB;AACjBJ,MAAAA,GAAG,CAAE,GAAEI,UAAW,EAAf,CAAH,GACKJ,GAAG,CAAE,GAAEI,UAAW,EAAf,CAAH,GAAuBJ,GAAG,CAAE,GAAEI,UAAW,EAAf,CAAH,GAAuB,CADnD,GAEKJ,GAAG,CAAE,GAAEI,UAAW,EAAf,CAAH,GAAuB,CAF5B;AAGD,KALD;AAMA,WAAOJ,GAAP;AACD,GARc,EAQZ,EARY,CAAf;AAUA,SAAON,GAAG,CAACI,MAAD,EAAS,CAACO,KAAD,EAAQC,IAAR,KAAiB;AAClC,WAAO;AAAED,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP;AACD,GAFS,CAAH,CAEJC,IAFI,CAEC,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACH,KAAF,GAAUI,CAAC,CAACJ,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAFrC,CAAP;AAGD;AAED,OAAO,SAASK,iBAAT,CAA2BT,QAA3B,EAAqC;AAC1C,SAAON,OAAO,CAACM,QAAQ,CAACC,WAAT,CAAqBR,GAArB,CAAyBiB,CAAC,IAAIA,CAAC,CAACP,UAAhC,CAAD,CAAd;AACD,C,CAED;AACA;;AACA,OAAO,SAASQ,wBAAT,CAAkCC,MAAlC,EAA0CC,IAA1C,EAAgD;AACrD,UAAQA,IAAR;AACE,SAAK,IAAL;AACE,aAAOD,MAAM,GAAG,EAAhB;;AACF,SAAK,IAAL;AACE,aAAOE,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,QAAT,GAAoB,CAA/B,IAAoC,CAA3C;;AACF;AACE,aAAOA,MAAP;AANJ;AAQD,C,CAED;;AACA,SAASI,iBAAT,CAA2BJ,MAA3B,EAAmC;AACjC,MAAIA,MAAM,KAAK,IAAf,EAAqB,OAAO,WAAP;AACrB,MAAIA,MAAM,KAAK,GAAf,EAAoB,OAAO,aAAP;AACpB,MAAIA,MAAM,KAAK,CAAf,EAAkB,OAAO,QAAP;AAClB,MAAIA,MAAM,KAAK,GAAf,EAAoB,OAAO,UAAP;AACpB,MAAIA,MAAM,KAAK,CAAf,EAAkB,OAAO,UAAP;AAClB,MAAIA,MAAM,KAAK,CAAf,EAAkB,OAAO,WAAP;AACnB,C,CAED;;;AACA,OAAO,SAASK,uBAAT,CAAiCL,MAAjC,EAAyCM,KAAzC,EAAgDC,QAAhD,EAA0D;AAC/D,SACGA,QAAQ,IAAIH,iBAAiB,CAACJ,MAAD,CAA9B,IACC,GAAED,wBAAwB,CAACC,MAAD,EAASM,KAAT,CAAgB,IAAGA,KAAM,EAFtD;AAID","sourcesContent":["import { map, compact } from \"lodash\";\n\n// Given a list of cocktails, this returns the counts of the ingredients\n// \"appearances\" in the list (e.g. Gin: 4, Brandy: 2...)\nexport function countIngredients(cocktails = []) {\n  const counts = cocktails.reduce((acc, cocktail) => {\n    cocktail.ingredients.forEach(({ ingredient }) => {\n      if (!ingredient) return;\n      acc[`${ingredient}`]\n        ? (acc[`${ingredient}`] = acc[`${ingredient}`] + 1)\n        : (acc[`${ingredient}`] = 1);\n    });\n    return acc;\n  }, {});\n\n  return map(counts, (count, name) => {\n    return { count, name };\n  }).sort((a, b) => (a.count < b.count ? 1 : -1));\n}\n\nexport function getIngredientKeys(cocktail) {\n  return compact(cocktail.ingredients.map(i => i.ingredient));\n}\n\n// We store all ingredient quantities in cl. This function converts\n// that to another format should the user want to.\nexport function convertMeasurementFromCl(amount, unit) {\n  switch (unit) {\n    case \"ml\":\n      return amount * 10;\n    case \"oz\":\n      return Math.round(amount * 0.351951 * 2) / 2;\n    default:\n      return amount;\n  }\n}\n\n// pass in amount in cl, returns any \"bar lingo\" covered by that amount.\nfunction lingoForClMeasure(amount) {\n  if (amount === 0.25) return \"A Dash of\";\n  if (amount === 0.5) return \"1 Bar Spoon\";\n  if (amount === 3) return \"1 Pony\";\n  if (amount === 4.5) return \"1 Jigger\";\n  if (amount === 6) return \"2 Ponies\";\n  if (amount === 9) return \"2 Jiggers\";\n}\n\n// returns a string representing amount/units, including lingo\nexport function createMeasurementString(amount, units, useLingo) {\n  return (\n    (useLingo && lingoForClMeasure(amount)) ||\n    `${convertMeasurementFromCl(amount, units)} ${units}`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
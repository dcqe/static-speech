{"ast":null,"code":"import{map,compact}from\"lodash\";// Given a list of cocktails, this returns the counts of the ingredients\n// \"appearances\" in the list (e.g. Gin: 4, Brandy: 2...)\nexport function countIngredients(){var cocktails=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var counts=cocktails.reduce(function(acc,cocktail){cocktail.ingredients.forEach(function(_ref){var ingredient=_ref.ingredient;if(!ingredient)return;acc[\"\".concat(ingredient)]?acc[\"\".concat(ingredient)]=acc[\"\".concat(ingredient)]+1:acc[\"\".concat(ingredient)]=1;});return acc;},{});return map(counts,function(count,name){return{count:count,name:name};}).sort(function(a,b){return a.count<b.count?1:-1;});}export function getIngredientKeys(cocktail){return compact(cocktail.ingredients.map(function(i){return i.ingredient;}));}// We store all ingredient quantities in cl. This function converts\n// that to another format should the user want to.\nexport function convertMeasurementFromCl(amount,unit){switch(unit){case\"ml\":return amount*10;case\"oz\":return Math.round(amount*0.351951*2)/2;default:return amount;}}// pass in amount in cl, returns any \"bar lingo\" covered by that amount.\nfunction lingoForClMeasure(amount){if(amount===0.25)return\"A Dash of\";if(amount===0.5)return\"1 Bar Spoon\";if(amount===3)return\"1 Pony\";if(amount===4.5)return\"1 Jigger\";if(amount===6)return\"2 Ponies\";if(amount===9)return\"2 Jiggers\";}// returns a string representing amount/units, including lingo\nexport function createMeasurementString(amount,units,useLingo){return useLingo&&lingoForClMeasure(amount)||\"\".concat(convertMeasurementFromCl(amount,units),\" \").concat(units);}","map":{"version":3,"sources":["/home/students/ge47qut/public_html/v2/react-speech/src/utilities/cocktail.utils.js"],"names":["map","compact","countIngredients","cocktails","counts","reduce","acc","cocktail","ingredients","forEach","ingredient","count","name","sort","a","b","getIngredientKeys","i","convertMeasurementFromCl","amount","unit","Math","round","lingoForClMeasure","createMeasurementString","units","useLingo"],"mappings":"AAAA,OAASA,GAAT,CAAcC,OAAd,KAA6B,QAA7B,CAEA;AACA;AACA,MAAO,SAASC,CAAAA,gBAAT,EAA0C,IAAhBC,CAAAA,SAAgB,2DAAJ,EAAI,CAC/C,GAAMC,CAAAA,MAAM,CAAGD,SAAS,CAACE,MAAV,CAAiB,SAACC,GAAD,CAAMC,QAAN,CAAmB,CACjDA,QAAQ,CAACC,WAAT,CAAqBC,OAArB,CAA6B,cAAoB,IAAjBC,CAAAA,UAAiB,MAAjBA,UAAiB,CAC/C,GAAI,CAACA,UAAL,CAAiB,OACjBJ,GAAG,WAAII,UAAJ,EAAH,CACKJ,GAAG,WAAII,UAAJ,EAAH,CAAuBJ,GAAG,WAAII,UAAJ,EAAH,CAAuB,CADnD,CAEKJ,GAAG,WAAII,UAAJ,EAAH,CAAuB,CAF5B,CAGD,CALD,EAMA,MAAOJ,CAAAA,GAAP,CACD,CARc,CAQZ,EARY,CAAf,CAUA,MAAON,CAAAA,GAAG,CAACI,MAAD,CAAS,SAACO,KAAD,CAAQC,IAAR,CAAiB,CAClC,MAAO,CAAED,KAAK,CAALA,KAAF,CAASC,IAAI,CAAJA,IAAT,CAAP,CACD,CAFS,CAAH,CAEJC,IAFI,CAEC,SAACC,CAAD,CAAIC,CAAJ,QAAWD,CAAAA,CAAC,CAACH,KAAF,CAAUI,CAAC,CAACJ,KAAZ,CAAoB,CAApB,CAAwB,CAAC,CAApC,EAFD,CAAP,CAGD,CAED,MAAO,SAASK,CAAAA,iBAAT,CAA2BT,QAA3B,CAAqC,CAC1C,MAAON,CAAAA,OAAO,CAACM,QAAQ,CAACC,WAAT,CAAqBR,GAArB,CAAyB,SAAAiB,CAAC,QAAIA,CAAAA,CAAC,CAACP,UAAN,EAA1B,CAAD,CAAd,CACD,CAED;AACA;AACA,MAAO,SAASQ,CAAAA,wBAAT,CAAkCC,MAAlC,CAA0CC,IAA1C,CAAgD,CACrD,OAAQA,IAAR,EACE,IAAK,IAAL,CACE,MAAOD,CAAAA,MAAM,CAAG,EAAhB,CACF,IAAK,IAAL,CACE,MAAOE,CAAAA,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAG,QAAT,CAAoB,CAA/B,EAAoC,CAA3C,CACF,QACE,MAAOA,CAAAA,MAAP,CANJ,CAQD,CAED;AACA,QAASI,CAAAA,iBAAT,CAA2BJ,MAA3B,CAAmC,CACjC,GAAIA,MAAM,GAAK,IAAf,CAAqB,MAAO,WAAP,CACrB,GAAIA,MAAM,GAAK,GAAf,CAAoB,MAAO,aAAP,CACpB,GAAIA,MAAM,GAAK,CAAf,CAAkB,MAAO,QAAP,CAClB,GAAIA,MAAM,GAAK,GAAf,CAAoB,MAAO,UAAP,CACpB,GAAIA,MAAM,GAAK,CAAf,CAAkB,MAAO,UAAP,CAClB,GAAIA,MAAM,GAAK,CAAf,CAAkB,MAAO,WAAP,CACnB,CAED;AACA,MAAO,SAASK,CAAAA,uBAAT,CAAiCL,MAAjC,CAAyCM,KAAzC,CAAgDC,QAAhD,CAA0D,CAC/D,MACGA,CAAAA,QAAQ,EAAIH,iBAAiB,CAACJ,MAAD,CAA9B,YACGD,wBAAwB,CAACC,MAAD,CAASM,KAAT,CAD3B,aAC8CA,KAD9C,CADF,CAID","sourcesContent":["import { map, compact } from \"lodash\";\n\n// Given a list of cocktails, this returns the counts of the ingredients\n// \"appearances\" in the list (e.g. Gin: 4, Brandy: 2...)\nexport function countIngredients(cocktails = []) {\n  const counts = cocktails.reduce((acc, cocktail) => {\n    cocktail.ingredients.forEach(({ ingredient }) => {\n      if (!ingredient) return;\n      acc[`${ingredient}`]\n        ? (acc[`${ingredient}`] = acc[`${ingredient}`] + 1)\n        : (acc[`${ingredient}`] = 1);\n    });\n    return acc;\n  }, {});\n\n  return map(counts, (count, name) => {\n    return { count, name };\n  }).sort((a, b) => (a.count < b.count ? 1 : -1));\n}\n\nexport function getIngredientKeys(cocktail) {\n  return compact(cocktail.ingredients.map(i => i.ingredient));\n}\n\n// We store all ingredient quantities in cl. This function converts\n// that to another format should the user want to.\nexport function convertMeasurementFromCl(amount, unit) {\n  switch (unit) {\n    case \"ml\":\n      return amount * 10;\n    case \"oz\":\n      return Math.round(amount * 0.351951 * 2) / 2;\n    default:\n      return amount;\n  }\n}\n\n// pass in amount in cl, returns any \"bar lingo\" covered by that amount.\nfunction lingoForClMeasure(amount) {\n  if (amount === 0.25) return \"A Dash of\";\n  if (amount === 0.5) return \"1 Bar Spoon\";\n  if (amount === 3) return \"1 Pony\";\n  if (amount === 4.5) return \"1 Jigger\";\n  if (amount === 6) return \"2 Ponies\";\n  if (amount === 9) return \"2 Jiggers\";\n}\n\n// returns a string representing amount/units, including lingo\nexport function createMeasurementString(amount, units, useLingo) {\n  return (\n    (useLingo && lingoForClMeasure(amount)) ||\n    `${convertMeasurementFromCl(amount, units)} ${units}`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}